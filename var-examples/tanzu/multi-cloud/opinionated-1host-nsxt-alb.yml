---
# THIS VARS FILE IS BROKEN AND UNTESTED!

# SOFTWARE_DIR must contain all required software
vc_iso: "{{ lookup('env', 'SOFTWARE_DIR') }}/VMware-VCSA-all-7.0.2-17958471.iso"
esxi_ova: "{{ lookup('env', 'SOFTWARE_DIR') }}/Nested_ESXi7.0u2a_Appliance_Template_v1.ova"
nsxt_ova: "{{ lookup('env', 'SOFTWARE_DIR') }}/nsx-unified-appliance-3.1.1.0.0.17483186.ova"
nsx_alb_controller_ova: "{{ lookup('env', 'SOFTWARE_DIR') }}/controller-20.1.6-9132.ova"

environment_tag: "tanzu-multi-cloud-nsxt-avi"  # Used to prepend object names in hosting vCenter
dns_server: "192.168.0.1"
dns_domain: "home.local"
ntp_server_ip: "192.168.0.1"  # Must be set to an IP address!
disk_mode: thin  # How all disks should be deployed
nested_host_password: "{{ opinionated.master_password }}"

hosting_vcenter:  # This is the vCenter which will be the target for nested vCenters and ESXi hosts
  ip: "vcsa.lab"
  username: "{{ lookup('env', 'PARENT_VCENTER_USERNAME') }}"
  password: "{{ lookup('env', 'PARENT_VCENTER_PASSWORD') }}"
  datacenter: "Home"  # Target for all VM deployment

# This section describes what will be created
opinionated:
  master_password: "VMware1!"
  nested_hosts:
    cpu_cores: 16  # CPU count per nested host
    ram_in_gb: 160  # memory per nested host
    local_disks:
      - size_gb: 800
        datastore_prefix: "datastore"
  hosting_cluster: Physical
  hosting_datastore: NVME
  hosting_network:
    base:
      port_group: Nest
      cidr: "192.168.0.0/22"
      gateway: "192.168.0.1"
      # A NSX-T deployment requires 4 IPs, plus 1 per esxi host. They MUST be contiguous.
      starting_addr: "192.168.1.50"
    # nsxt tep pool will not be routed, but should not clash with routeable ranges
    nsxt_tep:
      port_group: TEP
      vlan_id: 0
      cidr: "172.31.255.232/29"  # Should be at least a 29 which supports up to 5 hosts and 1 edge
    nsx_supernet:
      cidr: "172.21.0.0/18"
    avi_vips:
      cidr: "172.21.3.0/24"
  # This public key will be assigned to the created VMs, so you must have the private key to be able to use SSH
  ssh_public_key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC/qMIbcfUkClzrBi7QjUmtdfpjDlTSXsPcJsmdmezbem2SboQPujpFUGmzFXi5PqhPa3QOxvMn8oJpozlJYydDspFAAqX+0u8n0FrwMMn0ckwUtF4zxz/AnI8tUltjeN67M7mG+3W8ooRFeaY6nrjxEIXbkMOzSbeTaFcB9cDzRXcMmFiuoeDhUonEYbClrsPzLdzscw7Vz6BLMHwo9SBOqlaL25aG/DtZPB7jobQRh48q3RW+Hb29nH18biJNLiBDsRu1SJIzw7Dl+rNSX9Va56vX0cz5CDiTg9A69WgySDx7oZFZM3W6jyHCN0fQbw/OxE/2MemhfQbdJqgffA7zE0qx+/DVIoT5bBP7FPpQSxkMjC+AEAH4PPsDIP0KJH9do6+T/g/Mf6725IOaPSJyV0bAkz1T57T1ty19KdhvPVfjrMnCap+pLvD6Qd/lxzY9uFF4oOwWmo4xQ6hQXZ9oJUhrRsG2A5LF7XGXwOb8mHSG4InfUfjaov4gjLl5tN0=


#####################################################################
### No need to edit below this line for an opinionated deployment ###
#####################################################################

nested_vcenter:  # the vCenter appliance that will be deployed
  ip: "{{ opinionated.hosting_network.base.starting_addr }}"  # vCenter ip address
  mask: "{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
  gw: "{{ opinionated.hosting_network.base.gateway }}"
  host_name: "{{ opinionated.hosting_network.base.starting_addr }}"  # FQDN if there is working DNS server, otherwise put the ip as a name
  username: "administrator@vsphere.local"
  password: "{{ opinionated.master_password }}"
  datacenter: "Lab"  # DC to create after deployment
  # Below are properties of parent cluster
  hosting_network: "{{ opinionated.hosting_network.base.port_group }}"  # Parent port group where the vCenter VM will be deployed
  hosting_cluster: "{{ opinionated.hosting_cluster }}"  # Parent cluster where the vCenter VM will be deployed
  hosting_datastore: "{{ opinionated.hosting_datastore }}"  # Parent datastore where the vCenter VM will be deployed

nested_clusters:  # You can add clusters in this section by duplicating the existing cluster
  compute:  # This will be the name of the cluster in the nested  vCenter. Below are the minimum settings.
    enable_drs: true
    enable_ha: true
    # Below are properties of the hosting cluster
    hosting_cluster: "{{ opinionated.hosting_cluster }}"  # The nested ESXi VMs will be deployed here
    hosting_datastore: "{{ opinionated.hosting_datastore }}"  # Datastore target for nested ESXi VMs
    # Settings below are assigned to each host in the cluster
    vswitch0_vm_port_group_name: vm-network
    vswitch0_vm_port_group_vlan: "0"
    cpu_cores: "{{ opinionated.nested_hosts.cpu_cores }}"  # CPU count
    ram_in_gb: "{{ opinionated.nested_hosts.ram_in_gb }}"  # memory
    # In order list of disks to assign to the nested host. All will be marked as SSD.
    # Datastore names will be automatically be pre-pended with the hostname. E.g esx1
    # If the datastore_prefix property is removed the disk will not be set as a datastore
    # To leave the default OVA disks in place, delete this section.
    nested_hosts_disks: "{{ opinionated.nested_hosts.local_disks | default(omit) }}"
    # Added in vmnic order, these port groups must exist on the physical host
    # Must specify at least 2 port groups, up to a maximum of 10
    vmnic_physical_portgroup_assignment:
      - name: "{{ opinionated.hosting_network.base.port_group }}"
      - name: "{{ opinionated.hosting_network.nsxt_tep.port_group }}"

nested_hosts:
  - name: "esx1"
    ip: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(5) }}"
    mask: "{{ opinionated.hosting_network.base.cidr | ansible.utils.ipaddr('netmask') }}"
    gw: "{{ opinionated.hosting_network.base.gateway }}"
    nested_cluster: compute

# TODO can collapse to a single VDS if the edge tep port can be a vlan segment instead
distributed_switches:  # (optional) - section can be removed to not create any distributed switches
  - vds_name: nsxt-vds
    mtu: 1600
    vds_version: 7.0.0  # Should be 7.0.0, 6.7.0
    clusters:  # distributed switch will be attached to all hosts in the clusters listed
      - compute
    uplink_quantity: 1
    vmnics:
      - vmnic1

tspbm:  # Tag-based Storage Policy Based Management
  tag_categories:
    - category_name: tkg-storage-category
      description: "TKGS tag category"
      tags:
        - tag_name: tkg-storage-tag
          description: "Tag for datastores used by TKGS"
  datastore_tags:
    - datastore_name: "{{ opinionated.nested_hosts.local_disks[0].datastore_prefix }}-esx1"
      tag_names:
        - tkg-storage-tag
  vm_storage_policies:
    - storage_policy_name: tkg-storage-policy
      description: "TKGS storage performance policy"
      tag_name: tkg-storage-tag
      tag_category: tkg-storage-category

nsxt:  # (optional) - section can be removed to not create any nsxt objects
  manager:
    hostname: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(1) }}"
    ip: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(1) }}"
    netmask: "{{ opinionated.hosting_network.base.cidr | ansible.utils.ipaddr('netmask') }}"
    gateway: "{{ opinionated.hosting_network.base.gateway }}"
    username: admin  # this cannot be changed
    password: "{{ opinionated.master_password }}{{ opinionated.master_password }}"
    hosting_vcenter_ip: "{{ hosting_vcenter.ip }}"
    hosting_vcenter_username: "{{ hosting_vcenter.username }}"
    hosting_vcenter_password: "{{ hosting_vcenter.password }}"
    hosting_datacenter: "{{ hosting_vcenter.datacenter }}"
    hosting_datastore: "{{ opinionated.hosting_datastore }}"
    hosting_network: "{{ opinionated.hosting_network.base.port_group }}"
    hosting_cluster: "{{ opinionated.hosting_cluster }}"
    license_key: "{{ lookup('env', 'NSXT_LICENSE_KEY') }}"

  # If the section below is defined, the playbook will wait for the IP to become pingable
  # For TKG service deployments this is the default gateway of the supervisor network
  routing_tests:
    - ip_to_ping: "{{ opinionated.hosting_network.nsx_supernet.cidr | ansible.utils.ipmath(1) }}"
      # The playbook will present a message using the params below
      # A static route must be made to the router uplink for nsxt_supernet
      router_uplink: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(3) }}"
      nsxt_supernet: "{{ opinionated.hosting_network.nsx_supernet.cidr }}"

  ip_pools:
    - display_name: tep-pool  # This is a non-routable range which is used for the overlay tunnels.
      subnets:
        - allocation_ranges:
            - start: "{{ opinionated.hosting_network.nsxt_tep.cidr | ansible.utils.ipmath(1) }}"
              end: "{{ opinionated.hosting_network.nsxt_tep.cidr | ansible.utils.ipaddr('-2') | ansible.utils.ipaddr('address') }}"
          cidr: "{{ opinionated.hosting_network.nsxt_tep.cidr }}"

  uplink_profiles:
    - display_name: host-tep-profile
      teaming:
        active_list:
          - uplink_name: "uplink-1"
            uplink_type: PNIC
        policy: FAILOVER_ORDER
      transport_vlan: "{{ opinionated.hosting_network.nsxt_tep.vlan_id }}"
    - display_name: edge-tep-profile
      mtu: 9000
      teaming:
        active_list:
          - uplink_name: "uplink-1"
            uplink_type: PNIC
        policy: FAILOVER_ORDER
      transport_vlan: "{{ opinionated.hosting_network.nsxt_tep.vlan_id }}"
    - display_name: edge-uplink-profile
      mtu: 1500
      teaming:
        active_list:
          - uplink_name: "uplink-1"
            uplink_type: PNIC
        policy: FAILOVER_ORDER
      transport_vlan: 0

  transport_zones:
    - display_name: tz-overlay
      transport_type: OVERLAY_BACKED
      # host_switch_name: "{{ distributed_switches[0].vds_name }}"
      nested_nsx: true  # Set this to true if you use NSX-T for your physical host networking
      description: "Overlay Transport Zone"
    - display_name: tz-vlan
      transport_type: VLAN_BACKED
      # host_switch_name: sw_vlan
      description: "Uplink Transport Zone"

  transport_node_profiles:
    - display_name: tnp1
      host_switches:
        - host_switch_profiles:
            - name: host-tep-profile
              type: UplinkHostSwitchProfile
          host_switch_name: "{{ distributed_switches[0].vds_name }}"
          host_switch_type: VDS
          host_switch_mode: STANDARD
          ip_assignment_spec:
            resource_type: StaticIpPoolSpec
            ip_pool_name: "tep-pool"
          transport_zone_endpoints:
            - transport_zone_name: "tz-overlay"
            - transport_zone_name: "tz-vlan"
          uplinks:
            - uplink_name: "uplink-1"
              vds_uplink_name: "Uplink 1"
      description: "Cluster node profile"

  cluster_attach:
    - display_name: "tnc1"
      description: "Transport Node Collections 1"
      compute_manager_name: "vCenter"
      cluster_name: "compute"
      transport_node_profile_name: "tnp1"

  edge_nodes:
    - display_name: edge-node-1
      size: MEDIUM
      mgmt_ip_address: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(2) }}"
      mgmt_prefix_length: "{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
      mgmt_default_gateway: "{{ opinionated.hosting_network.base.gateway }}"
      network_management_name: vm-network
      network_uplink_name: vm-network
      network_tep_name: edge-tep-seg
      datastore_name: datastore-esx1
      cluster_name: compute
      host_switches:
        tep:
          uplink_profile_name: edge-tep-profile
          ip_assignment_spec:
            resource_type: StaticIpPoolSpec
            ip_pool_name: tep-pool
          transport_zone_endpoints:
            - transport_zone_name: "tz-overlay"
        uplink:
          host_switch_name: "sw_vlan"
          uplink_profile_name: edge-uplink-profile
          transport_zone_endpoints:
            - transport_zone_name: "tz-vlan"
      transport_zone_endpoints:
        - transport_zone_name: "tz-overlay-2"
        - transport_zone_name: "tz-vlan"

  edge_clusters:
    - edge_cluster_name: edge-cluster-1
      edge_cluster_members:
        - transport_node_name: edge-node-1

  vlan_segments:
    - display_name: t0-uplink
      vlan_ids: [0]
      transport_zone_display_name: tz-vlan
    - display_name: edge-tep-seg
      vlan_ids: [0]
      transport_zone_display_name: tz-vlan

  # For full spec see - https://github.com/laidbackware/ansible-for-nsxt/blob/vmware-lab-builder/library/nsxt_policy_tier0.py
  tier_0:
    display_name: "tkg-t0"
    ha_mode: ACTIVE_STANDBY
    uplink_ip: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(3) }}"
    disable_firewall: true
    static_routes:
      - state: present
        display_name: default-route
        network: "0.0.0.0/0"
        next_hops:
          - ip_address: "{{ opinionated.hosting_network.base.gateway }}"
    locale_services:
      - state: present
        display_name: "tkg-t0-ls"
        edge_cluster_info:
          edge_cluster_display_name: edge-cluster-1
        interfaces:
          - display_name: "test-t0-t0ls-iface"
            state: present
            subnets:
              - ip_addresses: ["{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(3) }}"]
                prefix_len: "{{ opinionated.hosting_network.base.cidr.split('/')[1] | int }}"
            segment_id: t0-uplink
            edge_node_info:
              edge_cluster_display_name: edge-cluster-1
              edge_node_display_name: edge-node-1
            mtu: 1500

  overlay_segments:
    - display_name: tkg-mgmt-seg
      transport_zone_display_name: tz-overlay
      tier1_display_name: mgmt-t1
      subnets:
        - gateway_address: >-
            {{ opinionated.hosting_network.nsx_supernet.cidr |
            ansible.utils.ipmath(1) }}/{{ opinionated.hosting_network.nsx_supernet.cidr.split('/')[1] |int +6 }}
    - display_name: reg-seg
      transport_zone_display_name: tz-overlay
      tier1_display_name: mgmt-t1
      subnets:
        - gateway_address: >-
            {{ opinionated.hosting_network.nsx_supernet.cidr |
            ansible.utils.ipmath(257) }}/{{ opinionated.hosting_network.nsx_supernet.cidr.split('/')[1] |int +6 }}
    - display_name: jump-seg
      transport_zone_display_name: tz-overlay
      tier1_display_name: mgmt-t1
      subnets:
        - gateway_address: >-
            {{ opinionated.hosting_network.nsx_supernet.cidr |
            ansible.utils.ipmath(513) }}/{{ opinionated.hosting_network.nsx_supernet.cidr.split('/')[1] |int +6 }}
    - display_name: avi-mgmt-seg
      transport_zone_display_name: tz-overlay
      tier1_display_name: mgmt-t1
      subnets:
        - gateway_address: >-
            {{ opinionated.hosting_network.nsx_supernet.cidr |
            ansible.utils.ipmath(769) }}/{{ opinionated.hosting_network.nsx_supernet.cidr.split('/')[1] |int +6 }}
    - display_name: avi-vip-seg
      transport_zone_display_name: tz-overlay
      tier1_display_name: mgmt-t1
      subnets:
        - gateway_address: >-
            {{ opinionated.hosting_network.avi_vips.cidr |
            ansible.utils.ipmath(1025) }}/{{ opinionated.hosting_network.avi_vips.cidr.split('/')[1]}}

  tier_1_gateways:
    - display_name: mgmt-t1
      route_advertisement_types:
        - "TIER1_CONNECTED"
      tier0_display_name: tkg-t0

nsx_alb:
  api_version: "20.1.2"
  controller_username: admin
  controller_password: "{{ opinionated.master_password }}"
  controller_ssh_public_key: "{{ opinionated.ssh_public_key }}"
  controller_default_password: "{{ lookup('env', 'AVI_DEFAULT_PASSWORD') }}"

  controller_ip: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(4) }}"
  controller_netmask: "{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
  controller_gateway: "{{ opinionated.hosting_network.base.gateway }}"
  dns_server: "{{ dns_server }}"
  ntp_server: "{{ ntp_server_ip }}"

  controller_vcenter_ip: "{{ nested_vcenter.ip }}"
  controller_vcenter_username: "{{ nested_vcenter.username }}"
  controller_vcenter_password: "{{ nested_vcenter.password }}"
  controller_vcenter_datacenter: "{{ nested_vcenter.datacenter }}"
  controller_vcenter_cluster: "compute"
  controller_vcenter_datastore: "datastore-esx1"
  controller_port_group: "vm-network"

  cloud_vcenter_username: "{{ nested_vcenter.username }}"
  cloud_vcenter_password: "{{ nested_vcenter.password }}"
  cloud_vcenter_url: "{{ nested_vcenter.ip }}"
  cloud_vcenter_datacenter: "{{ nested_vcenter.datacenter }}"

  se_vcenter_cluster: compute
  # The management network will host he service engine management interface
  se_management_port_group: avi-mgmt-seg
  se_management_network_cidr: "{{ opinionated.hosting_network.base.cidr }}"
  se_management_network_range: >-
    {{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(2) }}-
    {{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(3) }}
  se_management_network_gateway: "{{ opinionated.hosting_network.base.gateway }}"
  # The vip network will contain the virtual servers created by Avi
  se_vip_port_group: avi-vip-seg
  se_vip_network_cidr: "{{ opinionated.hosting_network.avi_vips.cidr }}"
  se_vip_network_range: >-
    {{ opinionated.hosting_network.avi_vips.cidr | ansible.utils.ipmath(2) }}-{{ opinionated.hosting_network.avi_vips.cidr |
    ansible.utils.ipaddr('-2') | ansible.utils.ipaddr('address') }}
