---
# SOFTWARE_DIR must contain all required software
vc_iso: "{{ lookup('env', 'SOFTWARE_DIR') }}/VMware-VCSA-all-7.0.3-20395099.iso"
esxi_ova: "{{ lookup('env', 'SOFTWARE_DIR') }}/Nested_ESXi7.0u3g_Appliance_Template_v1.ova"
haproxy_ova: "{{ lookup('env', 'SOFTWARE_DIR') }}/haproxy-v0.2.0.ova"

environment_tag: "tkgs-vds-haproxy"  # Used to prepend object names in hosting vCenter
dns_server: "192.168.0.1"
dns_domain: "home.local"
ntp_server_ip: "192.168.0.1"
disk_mode: thin  # How all disks should be deployed
# This will be set everywhere!
nested_host_password: "{{ opinionated.master_password }}"

hosting_vcenter:  # This is the vCenter which will be the target for nested vCenters and ESXi hosts
  ip: "vcsa.lab"
  username: "{{ lookup('env', 'PARENT_VCENTER_USERNAME') }}"
  password: "{{ lookup('env', 'PARENT_VCENTER_PASSWORD') }}"
  datacenter: "Home"  # Target for all VM deployment

# This section is only referenced by other variables in this file
opinionated:
  master_password: "VMware1!"
  number_of_hosts: 1  # number of ESXi VMs to deploy
  nested_hosts:
    cpu_cores: 10  # CPU count per nested host
    ram_in_gb: 96  # memory per nested host
    local_disks:  # (optional) this section can be removed to not modify local disks
      - size_gb: 400
        datastore_prefix: "datastore"  # omit this to not have a datastore created
  hosting_cluster: Physical
  hosting_datastore: NVME
  hosting_network:
    base:
      port_group: Nest  # Hosting port group
      cidr: "192.168.0.0/22"
      gateway: "192.168.0.1"
      # A TKGS deployment requires 8 IPs, plus 1 per esxi host. They MUST be contiguous.
      starting_addr: "192.168.0.170"
    # If you want to provide your own routing between networks, delete the tkgs.router section
    # If using your own network you must provide at least a /24.
    workload:
      port_group: trunk  # Hosting port group
      vlan_id: 104
      cidr: "172.19.14.0/24"
      gateway: "172.19.14.1"
  tanzu_vsphere:
    # This network is private and should not overlap with any routeable networks
    internal_kubernetes_services_network: 172.20.8.0/22

#####################################################################
### No need to edit below this line for an opinionated deployment ###
#####################################################################

nested_vcenter:  # the vCenter appliance that will be deployed
  ip: "{{ opinionated.hosting_network.base.starting_addr }}"  # vCenter ip address
  mask: "{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
  gw: "{{ opinionated.hosting_network.base.gateway }}"
  host_name: "{{ opinionated.hosting_network.base.starting_addr }}"  # FQDN if there is working DNS server, otherwise put the ip as a name
  username: "administrator@vsphere.local"
  password: "{{ opinionated.master_password }}"
  datacenter: "Lab"  # DC to create after deployment
  # Below are properties of parent cluster
  hosting_network: "{{ opinionated.hosting_network.base.port_group }}"  # Parent port group where the vCenter VM will be deployed
  hosting_cluster: "{{ opinionated.hosting_cluster }}"  # Parent cluster where the vCenter VM will be deployed
  hosting_datastore: "{{ opinionated.hosting_datastore }}"  # Parent datastore where the vCenter VM will be deployed

nested_clusters:  # You can add clusters in this section by duplicating the existing cluster
  compute:  # This will be the name of the cluster in the nested  vCenter. Below are the minimum settings.
    enable_drs: true
    # HA can only be enabled if there is are datastores accessible by all hosts.
    enable_ha: true
    ha_host_monitoring: disabled
    # Below are properties of the hosting cluster
    hosting_cluster: "{{ opinionated.hosting_cluster }}"  # The nested ESXi VMs will be deployed here
    hosting_datastore: "{{ opinionated.hosting_datastore }}"  # Datastore target for nested ESXi VMs
    # Settings below are assigned to each host in the cluster
    vswitch0_vm_port_group_name: vm-network
    vswitch0_vm_port_group_vlan: "0"
    cpu_cores: "{{ opinionated.nested_hosts.cpu_cores }}"  # CPU count
    ram_in_gb: "{{ opinionated.nested_hosts.ram_in_gb }}"  # memory
    # In order list of disks to assign to the nested host. All will be marked as SSD.
    # Datastore names will be automatically be pre-pended with the hostname. E.g esx1
    # If the datastore_prefix property is removed the disk will not be set as a datastore
    # To leave the default OVA disks in place, delete this section.
    nested_hosts_disks: "{{ opinionated.nested_hosts.local_disks | default(omit) }}"
    # Added in vmnic order, these port groups must exist on the physical host
    # Must specify at least 2 port groups, up to a maximum of 10
    vmnic_physical_portgroup_assignment:
      - name: "{{ opinionated.hosting_network.base.port_group }}"
      # - name: "{{ opinionated.hosting_network.base.port_group }}"
      - name: "{{ opinionated.hosting_network.workload.port_group }}"

# Below specifies how many IPs are reserved for other functions
opinionated_host_ip_ofset: 8
# You can add nested ESXi hosts below
nested_hosts: >-
  [
    {% for host_number in range(opinionated.number_of_hosts) %}
    {
      "name": "esx{{ host_number + 1 }}",
      "ip": "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(opinionated_host_ip_ofset + host_number) }}",
      "mask": "{{ opinionated.hosting_network.base.cidr | ansible.utils.ipaddr('netmask') }}",
      "gw": "{{ opinionated.hosting_network.base.gateway }}",
      "nested_cluster": "compute"
    },
    {% endfor %}
  ]

distributed_switches:  # To not create any distributed switches, comment this section.
  - vds_name: tkgs-vds
    mtu: 1500
    vds_version: 7.0.0
    clusters:  # distributed switch will be attached to all hosts in the clusters defined
      - compute
    uplink_quantity: 1
    vmnics:
      - vmnic1
    distributed_port_groups:
      - port_group_name: workload-pg
        vlan_id: "{{ opinionated.hosting_network.workload.vlan_id | default(0) }}"

tspbm:  # Tag-based Storage Policy Based Management
  tag_categories:
    - category_name: tkgs-storage-category
      description: "TKGS tag category"
      tags:
        - tag_name: tkgs-storage-tag
          description: "Tag for datastores used by TKGS"
  datastore_tags:
    - datastore_name: "{{ opinionated.nested_hosts.local_disks[0].datastore_prefix }}-esx1"
      tag_names:
        - tkgs-storage-tag
  vm_storage_policies:
    - storage_policy_name: tkgs-storage-policy
      description: "TKGS storage performance policy"
      tag_name: tkgs-storage-tag
      tag_category: tkgs-storage-category

tanzu_vsphere:
  content_library_datastore: "{{ opinionated.nested_hosts.local_disks[0].datastore_prefix }}-esx1"
  content_library_name: tkgs-library
  content_library_url: "http://wp-content.vmware.com/v2/latest/lib.json"
  default_content_library: tkgs-library
  dns_server_list: ["{{ dns_server }}"]
  ephemeral_storage_policy: "{{ tspbm.vm_storage_policies[0].storage_policy_name }}"
  fluentbit_enabled: false
  image_storage_policy: "{{ tspbm.vm_storage_policies[0].storage_policy_name }}"
  ntp_server_list: ["{{ ntp_server_ip }}"]
  management_dns_servers: ["{{ dns_server }}"]
  management_gateway: "{{ opinionated.hosting_network.base.gateway }}"
  management_netmask: "{{ opinionated.hosting_network.base.cidr | ansible.utils.ipaddr('netmask') }}"
  management_port_group: vm-network
  management_starting_address: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(3) }}"
  master_storage_policy: "{{ tspbm.vm_storage_policies[0].storage_policy_name }}"
  network_provider: VSPHERE_NETWORK
  services_cidr: "{{ opinionated.tanzu_vsphere.internal_kubernetes_services_network }}"  # This is private within each cluster
  supervisor_size: tiny
  vsphere_cluster: compute
  workload_dns_servers: ["{{ dns_server }}"]

  vds_networking:
    haproxy_ip_range_list:
      # formula to split the workload subnet in 2 and take the first available IP
      - starting_ip: >-
          {{ opinionated.hosting_network.workload.cidr |
          ansible.utils.ipsubnet((opinionated.hosting_network.workload.cidr.split('/')[1] |int)+1, 1) | ansible.utils.ipmath(0) }}
        # formula to split the workload subnet in 2 and calculate the number of usable IPs
        num_of_ips: >-
          {{ opinionated.hosting_network.workload.cidr |
          ansible.utils.ipsubnet((opinionated.hosting_network.workload.cidr.split('/')[1] |int)+1, 1) | ansible.utils.ipsubnet(32) |int -1 }}
    workload_gateway: "{{ opinionated.hosting_network.workload.gateway }}"
    workload_ip_range_list:
      # formula to split the workload subnet in 2 and take the first available IP
      - starting_ip: "{{ opinionated.hosting_network.workload.cidr | ansible.utils.ipmath(3) }}"
        # formula to split the workload subnet in 2 and calculate the number of usable IPs
        num_of_ips: >-
          {{ opinionated.hosting_network.workload.cidr |
          ansible.utils.ipsubnet((opinionated.hosting_network.workload.cidr.split('/')[1] |int)+1, 0) | ansible.utils.ipsubnet(32) |int -4 }}
    workload_netmask: "{{ opinionated.hosting_network.workload.cidr | ansible.utils.ipaddr('netmask') }}"
    workload_port_group: workload-pg

# tkg_router:
#   datastore: "{{ opinionated.nested_hosts.local_disks[0].datastore_prefix }}-esx1"
#   internal_gateway_cidr: "{{ opinionated.hosting_network.workload.gateway }}/{{ opinionated.hosting_network.workload.cidr.split('/')[1] }}"
#   internal_network_cidr: "{{ opinionated.hosting_network.workload.cidr }}"
#   uplink_ip_cidr: >-
#     {{ opinionated.hosting_network.base.starting_addr |
#     ansible.utils.ipmath(1) }}/{{ opinionated.hosting_network.base.cidr.split('/')[1] }}
#   uplink_next_hop: "{{ opinionated.hosting_network.base.gateway }}"

tkg_haproxy:
  username: admin
  password: "{{ opinionated.master_password }}"
  root_pwd: "{{ opinionated.master_password }}"
  datastore: "{{ opinionated.nested_hosts.local_disks[0].datastore_prefix }}-esx1"
  management_ip: "{{ opinionated.hosting_network.base.starting_addr | ansible.utils.ipmath(2) }}"
  management_subnet_bits: "{{ opinionated.hosting_network.base.cidr.split('/')[1] }}"
  management_port: "5556"
  management_gateway: "{{ opinionated.hosting_network.base.gateway }}"
  management_port_group: vm-network
  nameservers: "{{ dns_server }}"
  # Line below will create a cidr of the third quarter of opinionated.hosting_network.workload.cidr
  service_ip_range: >-
    {{ opinionated.hosting_network.workload.cidr |
    ansible.utils.ipsubnet((opinionated.hosting_network.workload.cidr.split('/')[1] |int)+1, 1) }}
  workload_ip: "{{ opinionated.hosting_network.workload.cidr | ansible.utils.ipmath(2) }}/{{ opinionated.hosting_network.workload.cidr.split('/')[1] }}"
  workload_gateway: "{{ opinionated.hosting_network.workload.gateway }}"
