---

- ansible.builtin.debug: msg="Deploying the following ESXi hosts {{ nested_hosts }}"

- ansible.builtin.stat: path={{ esxi_ova }}
  register: esxi_image

- ansible.builtin.debug: msg="ESXi OVA file at path {{ esxi_ova }} does not exist"
  when: not esxi_image.stat.exists
  failed_when: not esxi_image.stat.exists

- name: Deploy ESXi
  community.vmware.vmware_deploy_ovf:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    validate_certs: false
    name: "{{ environment_tag }}-{{ item.name }}"
    datacenter: "{{ hosting_vcenter.datacenter }}"
    # folder: /SG1/vm
    cluster: "{{ nested_clusters[item.nested_cluster].hosting_cluster }}"
    datastore: "{{ nested_clusters[item.nested_cluster].hosting_datastore }}"
    disk_provisioning: "{{ disk_mode }}"
    networks:
      "VM Network": "{{ nested_clusters[item.nested_cluster].vmnic_physical_portgroup_assignment[0].name }}"
    ova: "{{ esxi_ova }}"
    allow_duplicates: false
    power_on: false
    fail_on_spec_warnings: false
    wait: true
    wait_for_ip_address: false
    inject_ovf_env: true
    properties:
      guestinfo.hostname: "{{ environment_tag }}-{{ item.name }}"
      guestinfo.ipaddress: "{{ item.ip }} "
      guestinfo.netmask: "{{ item.mask }}"
      guestinfo.gateway: "{{ item.gw }}"
      guestinfo.vlan: "{{ nested_clusters[item.nested_cluster].management_vmk0_vlan | default(0) }}"
      guestinfo.dns: "{{ dns_server }}"
      guestinfo.domain: "{{ dns_domain }}"
      guestinfo.ntp: "{{ ntp_server_ip }}"
      guestinfo.syslog: ""
      guestinfo.password: "{{ nested_host_password }}"
      guestinfo.ssh: "True"
      guestinfo.createvmfs: "False"
  loop: "{{ nested_hosts }}"
  async: 7200
  poll: 0
  register: hosts_results

- name: Result check for deployment of host
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hosts_results.results }}"
  retries: 100
  delay: 15

- name: Gather disk info from virtual machine using name
  community.vmware.vmware_guest_disk_info:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    datacenter: "{{ hosting_vcenter.datacenter }}"
    validate_certs: false
    name: "{{ environment_tag }}-{{ item.name }}"
  delegate_to: localhost
  register: disk_info
  loop: "{{ nested_hosts }}"


- ansible.builtin.debug:
    msg:
      - "Configuring ESXi hosts to cluster spec"
      - "{{ nested_clusters }}"

# Build list of hosts with disks to be added, inlcuding the 3 base disks
# This is because the base ESXi OVA comes with 2 extra disks which might not be needed
- name: Build list of disks to remove
  ansible.builtin.set_fact:
    disks_to_remove: >-
      [
      {% for host_result in disk_info.results %}
      {% if "nested_hosts_disks" in nested_clusters[host_result.item.nested_cluster] %}
      {% if (nested_clusters[host_result.item.nested_cluster].nested_hosts_disks | length) < (host_result.guest_disk_info | length) %}
      {
        "esxi_vm_name": "{{ environment_tag }}-{{ host_result.item.name }}",
        "disks": [{% for disk in host_result.guest_disk_info.values() %}
                  {% if nested_clusters[host_result.item.nested_cluster].nested_hosts_disks | length < disk.unit_number %}
                    {
                      "state": "absent",
                      "scsi_controller": "{{ disk.controller_bus_number }}",
                      "unit_number": "{{ disk.unit_number }}"
                    },
                  {% endif %}
                  {% endfor %}
                  ]
      },
      {% endif %}
      {% endif %}
      {% endfor %}
      ]

- name: Remove disks from virtual machine using name
  community.vmware.vmware_guest_disk:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    datacenter: "{{ hosting_vcenter.datacenter }}"
    validate_certs: false
    name: "{{ item.esxi_vm_name }}"
    disk: "{{ item.disks }}"
  delegate_to: localhost
  loop: "{{ disks_to_remove }}"

# Build list of hosts with disks to be added, including the base disk
- name: Build list of disks to add/modify
  ansible.builtin.set_fact:
    disks_to_add: >-
      [{% for host in nested_hosts %}
      {% if "nested_hosts_disks" in nested_clusters[host.nested_cluster] %}
      {
      "name": "{{ environment_tag }}-{{ host.name }}",
      "disks" : [
                  {
                    "size_kb": "{{ disk_info.results[0].guest_disk_info['0'].capacity_in_kb }}",
                    "type": "{{ disk_mode }}",
                    "scsi_type": "paravirtual",
                    "scsi_controller": 0,
                    "unit_number": 0,
                    "datastore": "{{ nested_clusters[host.nested_cluster].hosting_datastore }}"
                  },
                  {% for disk in nested_clusters[host.nested_cluster].nested_hosts_disks %}
                    {
                      "size_gb": {{ disk.size_gb }},
                      "type": "{{ disk_mode }}",
                      "datastore": "{{ nested_clusters[host.nested_cluster].hosting_datastore }}",
                      "scsi_type": "paravirtual",
                      "scsi_controller": 0,
                      "unit_number": {{ loop.index0 + 1 }}
                    },
                  {% endfor %}
                ]
      },
      {% endif %}
      {% endfor %}]

- name: Add/modify disks
  community.vmware.vmware_guest_disk:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    validate_certs: false
    datacenter: "{{ hosting_vcenter.datacenter }}"
    name: "{{ item.name }}"
    disk: "{{ item.disks }}"
  delegate_to: localhost
  register: deploy_vm
  loop: "{{ disks_to_add }}"

- name: Edit VM CPU, Memory and networks
  community.vmware.vmware_guest:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    validate_certs: false
    datacenter: "{{ hosting_vcenter.datacenter }}"
    name: "{{ environment_tag }}-{{ item.name }}"
    hardware:
      memory_mb: "{{ nested_clusters[item.nested_cluster].ram_in_gb | int * 1024 }}"
      num_cpus: "{{ nested_clusters[item.nested_cluster].cpu_cores }}"
    networks: "{{ nested_clusters[item.nested_cluster].vmnic_physical_portgroup_assignment }}"
  delegate_to: localhost
  loop: "{{ nested_hosts }}"

- name: Set the state of a virtual machine to power on
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ hosting_vcenter.ip }}"
    username: "{{ hosting_vcenter.username }}"
    password: "{{ hosting_vcenter.password }}"
    validate_certs: false
    name: "{{ environment_tag }}-{{ item.name }}"
    state: powered-on
  delegate_to: localhost
  loop: "{{ nested_hosts }}"
  async: 7200
  poll: 0
  register: hosts_power_on_result

- name: Check if vCenter already exists so install steps can be skipped
  ansible.builtin.uri:
    url: "https://{{ nested_vcenter.ip }}/ui/"
    method: GET
    status_code: 200
    timeout: 2
    validate_certs: false
  ignore_errors: true
  register: vcenter_response

- ansible.builtin.set_fact:
    vcenter_exists: "{{ vcenter_response.status == 200 }}"

- name: Install vCenter and configure tasks
  when: not vcenter_exists
  block:
    - ansible.builtin.debug:
        msg:
          - "Deploying vCenter to spec"
          - "{{ nested_vcenter }}"

    - ansible.builtin.stat:
        path: "{{ vc_iso }}"
      register: esxi_image

    - ansible.builtin.debug: msg="vCenter ISO file at path {{ vc_iso }} does not exist"
      when: not esxi_image.stat.exists
      failed_when: not esxi_image.stat.exists

    - name: Create temporary build directory
      ansible.builtin.tempfile:
        state: directory
        suffix: build
      register: temp_dir_results

    - ansible.builtin.set_fact:
        tmp_dir={{ temp_dir_results.path }}

    - name: Create directory for VCSA extraction
      ansible.builtin.file:
        path: "{{ tmp_dir }}/vcsa"
        state: directory
        mode: '0766'

    - name: Extract VCSA ISO image
      ansible.builtin.command: bsdtar -xf {{ vc_iso }} -C {{ tmp_dir }}/vcsa

    - name: Set permissions
      ansible.builtin.file: dest={{ tmp_dir }}/vcsa mode=777 recurse=yes

    - name: Create JSON template file for VCSA 6.7 with embeded PSC
      ansible.builtin.template:
        src: embedded_vCSA_on_VC_6.7.json
        dest: "{{ tmp_dir }}/vCSA_on_VC.json"
        mode: '660'
      when: vc_iso is search("-6.7.")

    - name: Create JSON template file for VCSA 7.0 with embeded PSC
      ansible.builtin.template:
        src: embedded_vCSA_on_VC_7.0.json
        dest: "{{ tmp_dir }}/vCSA_on_VC.json"
        mode: '660'
      when: vc_iso is search("-7.0.") or vc_iso is search("-8.0.")

    - name: Perform VC CLI Install
      ansible.builtin.command: "bash ./vcsa-deploy install --accept-eula --no-esx-ssl-verify {{ tmp_dir }}/vCSA_on_VC.json"
      args:
        chdir: '{{ tmp_dir }}/vcsa/vcsa-cli-installer/lin64/'
      async: 9000
      poll: 0
      register: vcenter_result

    - ansible.builtin.debug:
        msg:
          - "The vCenter deployment can take a long time."
          - "You can check progress at https://{{ nested_vcenter.ip }}:5480 after the vCenter VM has booted."
          - "For detailed output browse to the most recent folder starting with vcsaCliInstaller under"
          - "/tmp and follow vcsa-cli-installer.log "

    - name: Result check for deployment of vCenter task
      ansible.builtin.async_status:
        jid: "{{ vcenter_result.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 600
      delay: 15

    - name: Check if the vSphere API is online
      ansible.builtin.uri:
        url: "https://{{ nested_vcenter.ip }}/ui/"
        method: GET
        status_code: 200
        timeout: 2
        validate_certs: false
        return_content: true
      retries: 60
      delay: 10
      until: result_vc_check.content.find("<title>vSphere Client</title>") != -1
      register: result_vc_check

    - name: Wait 30 seconds for the vCenter to settle
      ansible.builtin.wait_for:
        timeout: 30

  always:
    - name: Remove the temp directory
      ansible.builtin.file:
        path: "{{ tmp_dir }}"
        state: absent
      when: tmp_dir is defined
      no_log: true

- name: Result check for deployment of host power on
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  loop: "{{ hosts_power_on_result.results }}"
  retries: 100
  delay: 15

- name: Check if hosts are online
  ansible.builtin.uri:
    url: "https://{{ item.ip }}/ui/"
    method: GET
    status_code: 200
    timeout: 2
    validate_certs: false
  retries: 60
  delay: 10
  register: result_host_check
  until: result_host_check.status == 200
  loop: "{{ nested_hosts }}"
